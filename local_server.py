#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""

import asyncio
import logging
from aiohttp import web
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(__file__))

from app.config import cfg
from app.db import init_db
from app.handlers import common as common_handlers
from app.handlers import reflection as reflection_handlers
from app.handlers import practices as practices_handlers

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=cfg.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.include_router(reflection_handlers.router)
dp.include_router(practices_handlers.router)
dp.include_router(common_handlers.router)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update(**data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await dp.feed_update(bot, update)
        
        return web.json_response({"ok": True})
        
    except Exception as e:
        logging.error(f"Error processing update: {e}")
        return web.json_response({"ok": False, "error": str(e)}, status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return web.Response(text="Bot is running!")

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/webhook', webhook_handler)
    app.router.add_get('/health', health_check)
    
    return app

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
    print("üì° Webhook: http://localhost:8080/webhook")
    print("‚ù§Ô∏è Health: http://localhost:8080/health")
    print("=" * 50)
    
    app = await init_app()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await asyncio.Future()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    finally:
        await runner.cleanup()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
