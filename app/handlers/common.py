from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from ..keyboards import main_menu
from ..db import upsert_user, stats_by_user, list_reflections
from io import StringIO
import csv
from datetime import datetime

router = Router()

@router.message(F.text == "/start")
async def cmd_start(msg: Message):
    await upsert_user(msg.from_user)
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏. –ù–∞–∂–º–∏ ¬´üìù –ù–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu(),
    )

@router.message(F.text == "/help")
async def cmd_help(msg: Message):
    await msg.answer("/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å\n/about ‚Äî –æ –ø—Ä–æ–µ–∫—Ç–µ")

@router.message(F.text == "/about")
async def cmd_about(msg: Message):
    await msg.answer("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏, –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è 1‚Äì5, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç.")

@router.message(F.text == "üìä –ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
async def my_stats(msg: Message):
    s = await stats_by_user(msg.from_user.id)
    avg = f"{s['avg_mood']:.2f}" if s["avg_mood"] is not None else "‚Äî"
    await msg.answer(
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {s['cnt']}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {avg}",
        parse_mode="Markdown"
    )

@router.message(F.text == "üì¶ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π")
async def export_csv(msg: Message):
    rows = await list_reflections(msg.from_user.id)
    sio = StringIO()
    w = csv.DictWriter(sio, fieldnames=["created_at", "mood", "text", "tags"]) 
    w.writeheader()
    for r in rows:
        iso = datetime.fromtimestamp(r["created_at"]/1000).isoformat()
        w.writerow({"created_at": iso, **{k: r[k] for k in ("mood","text","tags")}})
    data = sio.getvalue().encode("utf-8")
    document = BufferedInputFile(data, filename="reflections.csv")
    await msg.answer_document(document=document)

@router.message()
async def unknown_message(msg: Message):
    await msg.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start, /help", reply_markup=main_menu())
