from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from ..practices import get_practices_for_mood, get_practices_by_category, get_random_practice, get_encouragement_message
from ..db import stats_by_user
import random

router = Router()

@router.message(F.text == "üßò –ü—Ä–∞–∫—Ç–∏–∫–∏")
async def show_practices_menu(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–∞–∫—Ç–∏–∫"""
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    stats = await stats_by_user(msg.from_user.id)
    last_mood = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
    
    if stats['cnt'] > 0:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        last_mood = random.randint(1, 5)
    
    builder.row(InlineKeyboardButton(
        text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", 
        callback_data=f"practice_mood_{last_mood}"
    ))
    builder.row(
        InlineKeyboardButton(text="üå¨Ô∏è –î—ã—Ö–∞–Ω–∏–µ", callback_data="practice_category_–¥—ã—Ö–∞–Ω–∏–µ"),
        InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ", callback_data="practice_category_–¥–≤–∏–∂–µ–Ω–∏–µ")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="practice_category_—Ä–µ—Ñ–ª–µ–∫—Å–∏—è"),
        InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", callback_data="practice_random")
    )
    
    await msg.answer(
        "üßò **–ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("practice_mood_"))
async def show_practices_by_mood(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    mood = int(callback.data.split("_")[-1])
    practices = get_practices_for_mood(mood)
    
    if not practices:
        await callback.answer("–ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
    practice = random.choice(practices)
    
    encouragement = get_encouragement_message(mood)
    
    text = f"{encouragement}\n\n"
    text += f"**{practice.title}**\n\n"
    text += f"üìù *{practice.description}*\n"
    text += f"‚è±Ô∏è *–í—Ä–µ–º—è: {practice.duration}*\n\n"
    text += "**–®–∞–≥–∏:**\n"
    
    for i, step in enumerate(practice.steps, 1):
        text += f"{i}. {step}\n"
    
    text += f"\nüí° *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {practice.category}*"
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", callback_data=f"practice_mood_{mood}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_practices")
            ).as_markup()
        )
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await callback.answer()

@router.callback_query(F.data.startswith("practice_category_"))
async def show_practices_by_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[-1]
    practices = get_practices_by_category(category)
    
    if not practices:
        await callback.answer("–ü—Ä–∞–∫—Ç–∏–∫–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    practice = random.choice(practices)
    
    text = f"**{practice.title}**\n\n"
    text += f"üìù *{practice.description}*\n"
    text += f"‚è±Ô∏è *–í—Ä–µ–º—è: {practice.duration}*\n\n"
    text += "**–®–∞–≥–∏:**\n"
    
    for i, step in enumerate(practice.steps, 1):
        text += f"{i}. {step}\n"
    
    text += f"\nüí° *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {practice.category}*"
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", callback_data=f"practice_category_{category}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_practices")
            ).as_markup()
        )
    except Exception:
        await callback.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await callback.answer()

@router.callback_query(F.data == "practice_random")
async def show_random_practice(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É"""
    mood = random.randint(1, 5)
    practice = get_random_practice(mood)
    
    if not practice:
        await callback.answer("–ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = f"üé≤ **–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞**\n\n"
    text += f"**{practice.title}**\n\n"
    text += f"üìù *{practice.description}*\n"
    text += f"‚è±Ô∏è *–í—Ä–µ–º—è: {practice.duration}*\n\n"
    text += "**–®–∞–≥–∏:**\n"
    
    for i, step in enumerate(practice.steps, 1):
        text += f"{i}. {step}\n"
    
    text += f"\nüí° *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {practice.category}*"
    
    try:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="üé≤ –ï—â–µ –æ–¥–Ω–∞", callback_data="practice_random"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_practices")
            ).as_markup()
        )
    except Exception:
        await callback.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
    else:
        await callback.answer()

@router.callback_query(F.data == "back_to_practices")
async def back_to_practices_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –ø—Ä–∞–∫—Ç–∏–∫"""
    builder = InlineKeyboardBuilder()
    
    builder.row(InlineKeyboardButton(
        text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", 
        callback_data="practice_mood_3"
    ))
    builder.row(
        InlineKeyboardButton(text="üå¨Ô∏è –î—ã—Ö–∞–Ω–∏–µ", callback_data="practice_category_–¥—ã—Ö–∞–Ω–∏–µ"),
        InlineKeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ", callback_data="practice_category_–¥–≤–∏–∂–µ–Ω–∏–µ")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è", callback_data="practice_category_—Ä–µ—Ñ–ª–µ–∫—Å–∏—è"),
        InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", callback_data="practice_random")
    )
    
    await callback.message.edit_text(
        "üßò **–ü—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()
