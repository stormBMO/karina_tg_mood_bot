from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from ..states import ReflectionWizard
from ..db import insert_reflection
from ..practices import get_practices_for_mood, get_encouragement_message
import random

router = Router()

@router.message(F.text == "üìù –ù–æ–≤–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è")
async def start_wizard(msg: Message, state: FSMContext):
    await state.set_state(ReflectionWizard.mood)
    await msg.answer("–û—Ü–µ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1‚Äì5 (1 ‚Äî –ø–ª–æ—Ö–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ):")

@router.message(ReflectionWizard.mood, F.text)
async def set_mood(msg: Message, state: FSMContext):
    try:
        mood = int(msg.text)
        if not 1 <= mood <= 5:
            raise ValueError
    except ValueError:
        return await msg.answer("–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1..5.")
    await state.update_data(mood=mood)
    await state.set_state(ReflectionWizard.text)
    await msg.answer("–û–ø–∏—à–∏, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")

@router.message(ReflectionWizard.text, F.text)
async def set_text(msg: Message, state: FSMContext):
    t = msg.text.strip()
    if len(t) < 10:
        return await msg.answer("–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–º–∏–Ω. 10 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.update_data(text=t)
    await state.set_state(ReflectionWizard.tags)
    await msg.answer("–î–æ–±–∞–≤—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—á–µ–±–∞, –∑–¥–æ—Ä–æ–≤—å–µ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")

@router.message(ReflectionWizard.tags, F.text)
async def set_tags(msg: Message, state: FSMContext):
    tags = "" if msg.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else msg.text
    data = await state.get_data()
    mood = data["mood"]
    
    await insert_reflection(
        msg.from_user.id,
        mood,
        data["text"],
        tags,
    )
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    practices = get_practices_for_mood(mood)
    encouragement = get_encouragement_message(mood)
    
    if practices:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        practice = random.choice(practices)
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(
            text="üßò –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", 
            callback_data=f"practice_mood_{mood}"
        ))
        builder.row(InlineKeyboardButton(
            text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
            callback_data="show_stats"
        ))
        
        text = f"‚úÖ **–ó–∞–ø–∏—Å–∞–ª!**\n\n{encouragement}\n\n"
        text += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**\n"
        text += f"**{practice.title}**\n"
        text += f"*{practice.description}*\n"
        text += f"‚è±Ô∏è *–í—Ä–µ–º—è: {practice.duration}*"
        
        await msg.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await msg.answer(
            f"‚úÖ **–ó–∞–ø–∏—Å–∞–ª!**\n\n{encouragement}\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚Äî ¬´üìä –ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏¬ª.",
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "show_stats")
async def show_stats_from_reflection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    from ..db import stats_by_user
    from ..keyboards import main_menu
    
    s = await stats_by_user(callback.from_user.id)
    avg = f"{s['avg_mood']:.2f}" if s["avg_mood"] is not None else "‚Äî"
    
    await callback.message.edit_text(
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {s['cnt']}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {avg}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()
